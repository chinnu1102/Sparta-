// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package cloudwatch

import (
	"encoding/json"
	"fmt"
)

//lint:ignore U1000 because it's actually used
type emf struct {
	// AWS corresponds to the JSON schema field "_aws".
	AWS emfAWS `json:"_aws"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *emfAWSCloudWatchMetricsElemMetricsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["Name"]; !ok || v == nil {
		return fmt.Errorf("field Name: required")
	}
	if v, ok := raw["Unit"]; !ok || v == nil {
		return fmt.Errorf("field Unit: required")
	}
	type Plain emfAWSCloudWatchMetricsElemMetricsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = emfAWSCloudWatchMetricsElemMetricsElem(plain)
	return nil
}

type emfAWSCloudWatchMetricsElem struct {
	// Dimensions corresponds to the JSON schema field "Dimensions".
	Dimensions [][]string `json:"Dimensions"`

	// Metrics corresponds to the JSON schema field "Metrics".
	Metrics []emfAWSCloudWatchMetricsElemMetricsElem `json:"Metrics"`

	// Namespace corresponds to the JSON schema field "Namespace".
	Namespace string `json:"Namespace"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *emfAWSCloudWatchMetricsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["Dimensions"]; !ok || v == nil {
		return fmt.Errorf("field Dimensions: required")
	}
	if v, ok := raw["Metrics"]; !ok || v == nil {
		return fmt.Errorf("field Metrics: required")
	}
	if v, ok := raw["Namespace"]; !ok || v == nil {
		return fmt.Errorf("field Namespace: required")
	}
	type Plain emfAWSCloudWatchMetricsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = emfAWSCloudWatchMetricsElem(plain)
	return nil
}

type emfAWS struct {
	// CloudWatchMetrics corresponds to the JSON schema field "CloudWatchMetrics".
	CloudWatchMetrics []emfAWSCloudWatchMetricsElem `json:"CloudWatchMetrics"`

	// Timestamp corresponds to the JSON schema field "Timestamp".
	Timestamp int `json:"Timestamp"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *emfAWS) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["CloudWatchMetrics"]; !ok || v == nil {
		return fmt.Errorf("field CloudWatchMetrics: required")
	}
	if v, ok := raw["Timestamp"]; !ok || v == nil {
		return fmt.Errorf("field Timestamp: required")
	}
	type Plain emfAWS
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = emfAWS(plain)
	return nil
}

type emfAWSCloudWatchMetricsElemMetricsElem struct {
	// Name corresponds to the JSON schema field "Name".
	Name string `json:"Name"`

	// Unit corresponds to the JSON schema field "Unit".
	Unit string `json:"Unit"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *emf) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["_aws"]; !ok || v == nil {
		return fmt.Errorf("field _aws: required")
	}
	//lint:ignore U1000 because it's actually used
	type Plain emf
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = emf(plain)
	return nil
}
